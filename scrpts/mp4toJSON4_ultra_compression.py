import cv2
import json
import os
import base64
import numpy as np

def rgb_to_hex(rgb):
    return '{:02X}{:02X}{:02X}'.format(rgb[0], rgb[1], rgb[2])

def quantize_colors(rgb_frame, div=64):
    return (rgb_frame // div) * div

def video_to_compressed_json(
    video_path,
    output_path,
    resize_to=(16, 16),
    max_frames=None,
    frame_rate=15,
    color_quantization_div=64
):
    if not os.path.exists(video_path):
        raise FileNotFoundError(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {video_path}")

    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        raise IOError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ.")

    width, height = resize_to
    palette = []
    palette_map = {}
    all_frames_indexed = []
    max_colors = 256

    total_pixels = 0
    frame_counter = 0
    
    while max_frames is None or frame_counter < max_frames:
        ret, frame = cap.read()
        if not ret:
            break
            
        frame_counter += 1
        
        frame = cv2.resize(frame, resize_to, interpolation=cv2.INTER_AREA)
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        if color_quantization_div > 1:
            rgb_frame = quantize_colors(rgb_frame, color_quantization_div)

        frame_indexed = []
        for row in rgb_frame:
            indexed_row = []
            for pixel in row:
                hex_color = rgb_to_hex(pixel)
                if hex_color not in palette_map:
                    if len(palette) >= max_colors:
                        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ü–≤–µ—Ç –≤ –ø–∞–ª–∏—Ç—Ä–µ
                        min_dist = float('inf')
                        closest_color = None
                        for col in palette:
                            # –í—ã—á–∏—Å–ª—è–µ–º –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
                            r1, g1, b1 = int(col[0:2], 16), int(col[2:4], 16), int(col[4:6], 16)
                            r2, g2, b2 = pixel[0], pixel[1], pixel[2]
                            dist = (r1 - r2)**2 + (g1 - g2)**2 + (b1 - b2)**2
                            if dist < min_dist:
                                min_dist = dist
                                closest_color = col
                        hex_color = closest_color
                    else:
                        palette_map[hex_color] = len(palette)
                        palette.append(hex_color)
                indexed_row.append(palette_map[hex_color])
            frame_indexed.append(indexed_row)
        all_frames_indexed.append(frame_indexed)
        total_pixels += width * height

    cap.release()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"- –ö–∞–¥—Ä–æ–≤: {len(all_frames_indexed)}")
    print(f"- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
    print(f"- –í—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π: {total_pixels}")
    print(f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: {len(palette)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ RLE –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ zlib)
    binary_data = bytearray()
    for frame in all_frames_indexed:
        flat_frame = [pixel for row in frame for pixel in row]
        i = 0
        while i < len(flat_frame):
            color_index = flat_frame[i]
            count = 1
            while i + count < len(flat_frame) and flat_frame[i + count] == color_index and count < 255:
                count += 1
            binary_data.append(color_index)
            binary_data.append(count)
            i += count

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Base64 (–±–µ–∑ zlib —Å–∂–∞—Ç–∏—è)
    frames_compressed = base64.b64encode(binary_data).decode('ascii')
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    uncompressed_size = len(binary_data)
    compressed_size = len(frames_compressed)
    compression_ratio = uncompressed_size / (total_pixels * 3)  # 3 –±–∞–π—Ç–∞ –Ω–∞ –ø–∏–∫—Å–µ–ª—å –¥–ª—è RGB
    
    print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
    print(f"- –ë–∏–Ω–∞—Ä–Ω—ã–µ RLE: {uncompressed_size / 1024:.2f} KB")
    print(f"- Base64: {compressed_size / 1024:.2f} KB")
    print(f"- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio:.2f}x")
    print(f"- –≠–∫–æ–Ω–æ–º–∏—è: {(1 - compression_ratio) * 100:.1f}%")

    result = {
        "width": width,
        "height": height,
        "frameRate": frame_rate,
        "frameCount": len(all_frames_indexed),
        "palette": palette,
        "compression": "binary_rle",  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è Lua —Å–∫—Ä–∏–ø—Ç–∞
        "frames": frames_compressed
    }

    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(result, f, ensure_ascii=False)

    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_path}")
    return output_path

if __name__ == "__main__":
    video_to_compressed_json(
        video_path=r"C:\Users\User\Videos\Captures\D__–ù–∞–π–¥–µ–Ω–æ ‚Äúxdw‚Äù_rs.rbxl - Roblox Studio 2025-05-11 20-36-56.mp4",
        output_path=r"C:\Users\User\Videos\Captures\D__–ù–∞–π–¥–µ–Ω–æ ‚Äúxdw‚Äù_rs.rbxl - Roblox Studio 2025-05-11 20-36-56_3.json",
        resize_to=(256, 256),
        max_frames=None,  # –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        frame_rate=30,
        color_quantization_div=64
    )
